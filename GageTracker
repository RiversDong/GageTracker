#!/usr/bin/env python3

import sys
argvs = sys.argv
if "--tantannomsk" in argvs:
    # DO NOT handle the ref genome by tantan
    from alignM_ori import *
else:
    # handle the ref genome by tantan at the default
    from alignM import *
    
from rbhM import *
from datingM import *
from mechanism_rbh1 import *



'''
Python script to annotate gene age
'''

## prepare the pre-data 

if "-h" in  argvs or "-help" in argvs:
    hf = os.path.join(os.path.dirname(__file__), "help")
    help_info = open(hf).read()
    print(help_info);sys.exit()
process_num=5
if "-p" in argvs:
    p_index = argvs.index("-p")
    process_num = int(argvs[p_index+1])
reference={}
ctrf = sys.argv[1]; ctr = open(ctrf).read(); exec(ctr); tfa = os.path.basename(target)
masking, last, lastdb, psl, twoBit, size, chain, cleanChain, rBest, axt2maf, block, newfa = pathBuilt(outpath)
exonbed = os.path.join(outpath, "exon.bed"); genebed = os.path.join(outpath, "gene.bed")
iintervals = os.path.join(masking, tfa+".intervals")
getInfo(annotation, exonbed, genebed)
focalmask = os.path.join(outpath,"masking"); focalmask=os.path.join(focalmask, tfa+".mask")

#####################
#The seperated steps#
#####################
# 1. only perform the genome alignment
if "-ao" in argvs or "-step1" in argvs:
    if "-mos" in argvs:
        reference = addPrefix(reference, newfa, process_num=process_num, mask="true")
    else:
        reference = addPrefix(reference, newfa, process_num=process_num)
    focal_pre_mask, iintervals = repeatMasking(target, masking)
    focal_chr_size = get_focal_size(target, size)
    focalmask = mask_gene_ratio(iintervals, exonbed, focal_pre_mask, focal_chr_size)
    if "-lg" in argvs:
        genomeAlignment(focalmask, reference, lastdb, last, threadNum=process_num, lg="true")
    else:
        genomeAlignment(focalmask, reference, lastdb, last, threadNum=process_num)
    sys.exit()
# 2. Only get the RBH result based on the results from first step
if ("-rbh" in argvs) or ("-step2" in argvs):
    tmp_reference = {}
    for i in reference:
        items = reference[i]; tmp_reference[i]=[]
        for j in items:
            tmp_reference[i].append(os.path.join(newfa, os.path.basename(j)))
    reference = tmp_reference
    maf2axt(last,psl)
    faToTwoBit(focalmask, reference, twoBit, size)
    axtChain(psl, chain, twoBit, size, cleanChain, outpath, tfa)
    netting(cleanChain, size, tfa, twoBit, rBest, outpath)
    axtToMaf(rBest, size, tfa, axt2maf)
    sys.exit()
# 3. perform age dating according to ctl file provided by user and the results from step 1 and step 2
if "-da" in argvs or "-step3" in argvs:
    tmp_reference = {}
    for i in reference:
        items = reference[i]; tmp_reference[i]=[]
        for j in items:
            tmp_reference[i].append(os.path.join(newfa, os.path.basename(j)))
    tsize = os.path.join(size, tfa + ".chrom.sizes")
    block_parameter = os.path.join(os.path.dirname(__file__), "maf2synteny.param.file")
    blockGene(axt2maf, block, block_parameter, tsize, genebed)
    exonIntersectRbest(rBest, exonbed, block)
    gene2ratio = gene_mask_ratio(exonbed, iintervals)
    dating(block, genebed, reference, branch, outpath, age, voting, gene2ratio)
    if "-m" in argvs:
        age_table = os.path.join(outpath, age)
        branch.reverse()
        young = [i for i in branch if i not in old_br]
        main_mechanism(age_table, branch, young, protein_seq, outpath, annotation)
    sys.exit()

######################
#The whole procedures#
######################
## Model: 1 for the genome alignment
if "-mos" in argvs:
    print("Mask the reference sequence.....haha")
    reference = addPrefix(reference, newfa, process_num=process_num, mask="true")
else:
    reference = addPrefix(reference, newfa, process_num=process_num)
focal_pre_mask, iintervals = repeatMasking(target, masking)
focal_chr_size = get_focal_size(target, size)
focalmask = mask_gene_ratio(iintervals, exonbed, focal_pre_mask, focal_chr_size)
if "-lg" in argvs:
    print("runnding the lastal5... haha")
    genomeAlignment(focalmask, reference, lastdb, last, threadNum=process_num, lg="true")
else:
    genomeAlignment(focalmask, reference, lastdb, last, threadNum=process_num)
## Model: 2 for RBH find
maf2axt(last,psl)
faToTwoBit(focalmask, reference, twoBit, size)
axtChain(psl, chain, twoBit, size, cleanChain, outpath, tfa)
netting(cleanChain, size, tfa, twoBit, rBest, outpath)
axtToMaf(rBest, size, tfa, axt2maf)
## Model 3 for gene dating
tsize = os.path.join(size, tfa + ".chrom.sizes")
block_parameter = os.path.join(os.path.dirname(__file__), "maf2synteny.param.file")
blockGene(axt2maf, block, block_parameter, tsize, genebed)
exonIntersectRbest(rBest, exonbed, block)
gene2ratio = gene_mask_ratio(exonbed, iintervals)
dating(block, genebed, reference, branch, outpath, age, voting, gene2ratio)
## infer the origination mechanism if specify this parameter
if "-m" in argvs:
    age_table = os.path.join(outpath, age)
    branch.reverse()
    young = [i for i in branch if i not in old_br]
    main_mechanism(age_table, branch, young, protein_seq, outpath, annotation)
